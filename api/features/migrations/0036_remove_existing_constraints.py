# Generated by Django 3.2.12 on 2022-02-17 17:14
import logging

from django.db import migrations, models

logger = logging.getLogger(__name__)

idx_names = (
    f"unique_for_{model}" for model in ("environment", "identity", "feature_segment")
)


def remove_unique_constraints(apps, schema_editor):
    if schema_editor.connection.vendor == "postgresql":
        for idx_name in idx_names:
            schema_editor.execute(f"DROP INDEX CONCURRENTLY {idx_name};")
    else:
        feature_state_model_class = apps.get_model("features", "featurestate")
        schema_editor.remove_constraint(
            model=feature_state_model_class,
            constraint=models.UniqueConstraint(
                condition=models.Q(("identity__isnull", True)),
                fields=("environment", "feature", "feature_segment"),
                name="unique_for_feature_segment",
            ),
        )
        schema_editor.remove_constraint(
            model=feature_state_model_class,
            constraint=models.UniqueConstraint(
                condition=models.Q(("feature_segment__isnull", True)),
                fields=("environment", "feature", "identity"),
                name="unique_for_identity",
            ),
        )
        schema_editor.remove_constraint(
            model=feature_state_model_class,
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("feature_segment__isnull", True), ("identity__isnull", True)
                ),
                fields=("environment", "feature"),
                name="unique_for_environment",
            ),
        )


def re_add_unique_constraints(apps, schema_editor):
    if schema_editor.connection.vendor == "postgresql":
        schema_editor.execute(
            """
            CREATE UNIQUE INDEX "unique_for_feature_segment" 
                ON "features_featurestate" ("environment_id", "feature_id", "feature_segment_id") 
                WHERE "identity_id" IS NULL;
            CREATE UNIQUE INDEX "unique_for_identity" 
                ON "features_featurestate" ("environment_id", "feature_id", "identity_id") 
                WHERE "feature_segment_id" IS NULL;
            CREATE UNIQUE INDEX "unique_for_environment" 
                ON "features_featurestate" ("environment_id", "feature_id") 
                WHERE ("feature_segment_id" IS NULL AND "identity_id" IS NULL);
        """
        )
    else:
        feature_state_model_class = apps.get_model("features", "featurestate")
        schema_editor.add_constraint(
            model=feature_state_model_class,
            constraint=models.UniqueConstraint(
                condition=models.Q(("identity__isnull", True)),
                fields=("environment", "feature", "feature_segment"),
                name="unique_for_feature_segment",
            ),
        )
        schema_editor.add_constraint(
            model=feature_state_model_class,
            constraint=models.UniqueConstraint(
                condition=models.Q(("feature_segment__isnull", True)),
                fields=("environment", "feature", "identity"),
                name="unique_for_identity",
            ),
        )
        schema_editor.add_constraint(
            model=feature_state_model_class,
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("feature_segment__isnull", True), ("identity__isnull", True)
                ),
                fields=("environment", "feature"),
                name="unique_for_environment",
            ),
        )


class Migration(migrations.Migration):

    atomic = False

    dependencies = [
        ("features", "0035_auto_20211109_0603"),
    ]

    operations = [
        migrations.RunPython(
            remove_unique_constraints,
            reverse_code=re_add_unique_constraints,
            atomic=False,
        ),
    ]
